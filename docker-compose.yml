services:
  web:
    build:
      context: .
      dockerfile: Dockerfile
#    command: >
#      bash -c "python manage.py migrate && python manage.py runserver 0.0.0.0:8000"
    environment:
      - DATABASE_HOST=db
      - REDIS_HOST=redis
      - SECRET_KEY=${SECRET_KEY}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_BACKEND=${CELERY_RESULT_BACKEND}
      - DJANGO_SETTINGS_MODULE=config.settings
    env_file:
      - .env
    ports:
      - "80:8000"
    volumes:
      - .:/app
      - static_volume:/code/static
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  db:
    image: postgres
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U $${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: [ 'CMD', 'redis-cli', 'ping' ]
      interval: 30s
      timeout: 10s
      retries: 5

  celery:
    build:
      context: .
      dockerfile: Dockerfile
    command: celery -A config worker --loglevel=info
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings
      - DATABASE_HOST=db
      - REDIS_HOST=redis
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_BACKEND=${CELERY_RESULT_BACKEND}
    env_file:
      - .env
    volumes:
      - .:/app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
    command: celery -A config beat --loglevel=info
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings
      - DATABASE_HOST=db
      - REDIS_HOST=redis
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
    env_file:
      - .env
    volumes:
      - .:/app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

volumes:
  postgres_data:
  static_volume:
  redis_data: