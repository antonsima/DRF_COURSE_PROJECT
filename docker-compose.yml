services:
  web:
#    image: ${DOCKER_HUB_USERNAME}/myapp:${IMAGE_TAG}
#    networks:
#      - mynetwork
    build:
      context: .

    command: >
      bash -c "python manage.py migrate && python manage.py runserver 0.0.0.0:8000"
    env_file:
      - .env
    ports:
      - "80:8000"
    volumes:
      - static_volume:/app/static
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  db:
#    networks:
#      - mynetwork
    image: postgres
#    environment:
#      - POSTGRES_USER=${POSTGRES_USER}
#      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
#      - POSTGRES_DB=${POSTGRES_DB}
    env_file:
      - .env
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}']
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  redis:
#    networks:
#      - mynetwork
    image: redis:alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: [ 'CMD', 'redis-cli', 'ping' ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  celery:
#    image: ${DOCKER_HUB_USERNAME}/myapp:${IMAGE_TAG}
#    networks:
#      - mynetwork
    build:
      context: .
#      dockerfile: Dockerfile
    command: celery -A config worker --loglevel=info
#    environment:
#      - DJANGO_SETTINGS_MODULE=config.settings
#      - DATABASE_HOST=db
#      - REDIS_HOST=redis
#      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
#      - CELERY_BACKEND=${CELERY_RESULT_BACKEND}
    env_file:
      - .env
    volumes:
      - static_volume:/app/static
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  celery_beat:
#    image: ${DOCKER_HUB_USERNAME}/myapp:${IMAGE_TAG}
#    networks:
#      - mynetwork
    build:
      context: .
#      dockerfile: Dockerfile
    command: celery -A config beat --loglevel=info
#    environment:
#      - DJANGO_SETTINGS_MODULE=config.settings
#      - DATABASE_HOST=db
#      - REDIS_HOST=redis
#      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
    env_file:
      - .env
    volumes:
      - static_volume:/app/static
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

volumes:
  postgres_data:
  static_volume:
#  redis_data:

#networks:
#  mynetwork:
#    driver: bridge