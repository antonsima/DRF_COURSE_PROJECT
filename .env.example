SECRET_KEY="django-insecure-k9rfi37cf2xwb*4xafiy6yh+z^tyj2$i41w26mmo(_7$qd0^)z"
DEBUG=True

POSTGRES_DB=
POSTGRES_USER=
POSTGRES_PASSWORD=
HOST=
PORT=

EMAIL_HOST_USER=
EMAIL_HOST_PASSWORD=

STRIPE_API_KEY=
STRIPE_PUBLIC_KEY=

REDIS_HOST=
REDIS_PORT=
REDIS_DB=

BOT_TOKEN=

CELERY_BROKER_URL=
CELERY_RESULT_BACKEND=

DATABASE_URL=

IMAGE_TAG=
DOCKER_HUB_USERNAME=

      - name: Deploy to Server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            cd ~/DRF_course_project
            git pull
            cat > .env << 'ENV_EOF'
          SECRET_KEY=${{ secrets.SECRET_KEY }}
          DEBUG=${{ secrets.DEBUG }}
          POSTGRES_DB=test_db
          POSTGRES_USER=postgres
          POSTGRES_PASSWORD=postgres
          DATABASE_HOST=db
          REDIS_HOST=redis
          CELERY_BROKER_URL=redis://redis:6379
          CELERY_RESULT_BACKEND=redis://redis:6379
          IMAGE_TAG=${{ github.sha }}
          DOCKER_HUB_USERNAME=${{ secrets.DOCKER_HUB_USERNAME }}
          BOT_TOKEN=${{ secrets.BOT_TOKEN }}
          ENV_EOF
            echo "✅ .env file created:"
            cat .env
#            sudo docker rm -f $(sudo docker ps -aq) 2>/dev/null || true
#            sudo docker volume rm -f $(sudo docker volume ls -q) 2>/dev/null || true
#            sudo docker network rm $(sudo docker network ls -q) 2>/dev/null || true
#            sudo docker system prune -a -f --volumes
#            sudo systemctl restart docker
#            sleep 5
#            sudo docker compose -f docker-compose.yml --env-file .env up -d --build --force-recreate
#            sleep 10
#            sudo docker ps -a
#            sudo docker compose logs web
# Останавливаем только контейнеры проекта (не удаляем volumes!)
            sudo docker compose -f docker-compose.yml down
# Перезапускаем Docker (опционально, если нужно)
            sudo systemctl restart docker
            sleep 5
# Запускаем базу данных отдельно
            sudo docker compose -f docker-compose.yml --env-file .env up -d --build db
            sleep 10  # Ждем полного запуска БД
# Применяем миграции
            sudo docker compose -f docker-compose.yml --env-file .env exec web python manage.py migrate
# Запускаем все сервисы
            sudo docker compose -f docker-compose.yml --env-file .env up -d --build --force-recreate

            sleep 10
            sudo docker ps -a
            sudo docker compose logs web
          EOF