name: Django CI

on: [push, pull_request]

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8

      - name: Run Flake8
        run: flake8 .

  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    needs: lint

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Cache Poetry dependencies
        uses: actions/cache@v3
        id: cache-poetry
        with:
          path: |
            ~/.cache/pypoetry
            ~/.local/share/virtualenvs/
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: ${{ runner.os }}-poetry-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry config virtualenvs.in-project true
          poetry config virtualenvs.create true
          poetry install --no-interaction --no-ansi --no-root

      - name: Run migrate
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          HOST: localhost
          PORT: 5432
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
        run: poetry run python manage.py migrate

      - name: Run tests
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
        run: poetry run python manage.py test

  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Log in to Docker hub
        run: echo ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }} | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:${{ github.sha }} .

      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Deploy to Server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            cd ~/DRF_course_project
            git pull
            cat > .env << 'ENV_EOF'
            SECRET_KEY=${{ secrets.SECRET_KEY }}
            DEBUG=${{ secrets.DEBUG }}
            POSTGRES_DB=test_db
            POSTGRES_USER=postgres
            POSTGRES_PASSWORD=postgres
            DATABASE_HOST=db
            REDIS_HOST=redis
            CELERY_BROKER_URL=redis://redis:6379
            CELERY_RESULT_BACKEND=redis://redis:6379
            IMAGE_TAG=${{ github.sha }}
            DOCKER_HUB_USERNAME=${{ secrets.DOCKER_HUB_USERNAME }}
            BOT_TOKEN=${{ secrets.BOT_TOKEN }}
            ENV_EOF
            echo "âœ… .env file created:"
            cat .env
            sudo docker rm -f $(sudo docker ps -aq) 2>/dev/null || true
            sudo docker volume rm -f $(sudo docker volume ls -q) 2>/dev/null || true
            sudo docker network rm $(sudo docker network ls -q) 2>/dev/null || true
            sudo docker system prune -a -f --volumes
            sudo systemctl restart docker
            sleep 5
            sudo docker compose -f docker-compose.yml --env-file .env up -d --build --force-recreate
            sleep 10
            sudo docker ps -a
            sudo docker compose logs web
          EOF
