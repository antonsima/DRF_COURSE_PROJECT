name: Django CI

on: [push, pull_request]

jobs:
#  lint:
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Check out code
#        uses: actions/checkout@v3
#
#      - name: Set up Python
#        uses: actions/setup-python@v4
#        with:
#          python-version: '3.12'
#
#      - name: Install dependencies
#        run: |
#          python -m pip install --upgrade pip
#          pip install flake8
#
#      - name: Run Flake8
#        run: flake8 .
#
#  test:
#    runs-on: ubuntu-latest
#    services:
#      postgres:
#        image: postgres:14
#        env:
#          POSTGRES_USER: postgres
#          POSTGRES_PASSWORD: postgres
#          POSTGRES_DB: test_db
#        ports:
#          - 5432:5432
#        options: >-
#          --health-cmd pg_isready
#          --health-interval 10s
#          --health-timeout 5s
#          --health-retries 5
#
#    needs: lint
#
#    steps:
#      - name: Check out code
#        uses: actions/checkout@v3
#
#      - name: Set up Python
#        uses: actions/setup-python@v4
#        with:
#          python-version: '3.12'
#
#      - name: Cache Poetry dependencies
#        uses: actions/cache@v3
#        id: cache-poetry
#        with:
#          path: |
#            ~/.cache/pypoetry
#            ~/.local/share/virtualenvs/
#          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
#          restore-keys: ${{ runner.os }}-poetry-
#
#      - name: Install dependencies
#        run: |
#          python -m pip install --upgrade pip
#          pip install poetry
#          poetry config virtualenvs.in-project true
#          poetry config virtualenvs.create true
#          poetry install --no-interaction --no-ansi --no-root
#
#      - name: Run migrate
#        env:
#          POSTGRES_DB: test_db
#          POSTGRES_USER: postgres
#          POSTGRES_PASSWORD: postgres
#          HOST: localhost
#          PORT: 5432
#          SECRET_KEY: ${{ secrets.SECRET_KEY }}
#        run: poetry run python manage.py migrate
#
#      - name: Run tests
#        env:
#          SECRET_KEY: ${{ secrets.SECRET_KEY }}
#        run: poetry run python manage.py test

  build:
    runs-on: ubuntu-latest
#    needs: test

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Log in to Docker hub
        run: echo ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }} | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:${{ github.sha }} .

      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Create .env file from secrets
        run: |
          cat << EOF > .env
          SECRET_KEY=${{ secrets.SECRET_KEY }}
          DEBUG=${{ secrets.DEBUG }}
          POSTGRES_DB=${{ secrets.POSTGRES_DB }}
          POSTGRES_USER=${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          DATABASE_HOST=db
          REDIS_HOST=redis
          CELERY_BROKER_URL=redis://redis:6379
          CELERY_RESULT_BACKEND=redis://redis:6379
          IMAGE_TAG=${{ github.sha }}
          DOCKER_HUB_USERNAME=${{ secrets.DOCKER_HUB_USERNAME }}
          EOF

#      - name: Create docker-compose.yml file from secrets
#        run: |
#          cat << EOF > docker-compose.yml
#          services:
#            web:
#              image: ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:${IMAGE_TAG}
#              networks:
#                - mynetwork
#              command: >
#              bash -c "python manage.py migrate && python manage.py runserver 0.0.0.0:8000"
#              env_file:
#                - .env
#              ports:
#                - "80:8000"
#              volumes:
#                - .:/app
#                - static_volume:/code/static
#              depends_on:
#                db:
#                  condition: service_healthy
#                redis:
#                  condition: service_healthy
#
#            db:
#              networks:
#                - mynetwork
#              image: postgres
#              env_file:
#                - .env
#              ports:
#                - "5432:5432"
#              volumes:
#                - postgres_data:/var/lib/postgresql/data
#              healthcheck:
#                test: ['CMD-SHELL', 'pg_isready -U $${POSTGRES_USER} -d ${POSTGRES_DB}']
#                interval: 30s
#                timeout: 10s
#                retries: 5
#
#            redis:
#              networks:
#                - mynetwork
#              image: redis:alpine
#              ports:
#                - "6379:6379"
#              healthcheck:
#                test: [ 'CMD', 'redis-cli', 'ping' ]
#                interval: 30s
#                timeout: 10s
#                retries: 5
#
#            celery:
#              image: ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:${IMAGE_TAG}
#              networks:
#                - mynetwork
#              command: celery -A config worker --loglevel=info
#              env_file:
#                - .env
#              volumes:
#                - .:/app
#              depends_on:
#                db:
#                  condition: service_healthy
#                redis:
#                  condition: service_healthy
#
#            celery_beat:
#              networks:
#                - mynetwork
#              command: celery -A config beat --loglevel=info
#              env_file:
#                - .env
#              volumes:
#                - .:/app
#              depends_on:
#                db:
#                  condition: service_healthy
#                redis:
#                  condition: service_healthy
#
#          volumes:
#            postgres_data:
#            static_volume:
#            redis_data:
#
#          networks:
#            mynetwork:
#              driver: bridge

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Deploy to Server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            cd ~/DRF_course_project
            git pull
            sudo docker rm -f ***_redis_1 ***_db_1 ***_web_1 2>/dev/null || true
            sudo docker rm -f $(docker ps -aq) 2>/dev/null || true
            sudo docker network rm ***_mynetwork 2>/dev/null || true
            sleep 2
            docker-compose down --remove-orphans --rmi all --volumes --timeout 0
            docker-compose -f docker-compose.yml --env-file .env up -d --build
          EOF

